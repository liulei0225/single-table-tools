package com.qieren.tool.core;

import com.qieren.tool.bo.Column;
import com.qieren.tool.bo.Table;
import com.qieren.tool.util.Util;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.Velocity;
import org.apache.velocity.exception.ResourceNotFoundException;

import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author qieren
 * @version 1.0
 * @since 2013-11-04
 */
public class Generate {

    private static File createPath(String file) {
        File f = new File(file);
        File pf = f.getParentFile();
        if (!pf.exists()) {
            pf.mkdirs();
        }
        return f;
    }

    private static void gene(String template, VelocityContext context, File file, String encoding) {
        if (template == null) {
            log("找不到模板文件");
            return;
        }
        try {
//            Writer writer = new FileWriter(file);
            Writer writer = new OutputStreamWriter(new FileOutputStream(file),encoding);
            Velocity.getTemplate(template, "UTF-8").merge(context, writer);
            writer.close();
        } catch (IOException e) {
            throw new RuntimeException("生成文件失败!" + file, e);
        } catch (ResourceNotFoundException e) {
            throw new RuntimeException("找不到模块文件!" + template, e);
        }
    }

    private static DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

    private static String header = " * This file is generated by JadeFortune code generation tool version 0.2 ^_^\r\n * Created at " + dateFormat.format(new Date());

    private static void log(String msg) {
        System.out.println(msg);
    }


    private static VelocityContext getContext(Config.Project project, Config.GeneItem geneFile, List<Table> tables, Table table, String path) throws Exception {
        VelocityContext context = new VelocityContext();
        context.put("head", header);
        context.put("pkg", project.getPkg());
        context.put("path", path);
        context.put("Util", Util.class);
        context.put("Config", Config.instance());
        context.put("table", table);
        context.put("tables", tables);
        context.put("buttons", project.getButtons());
        context.put("itemCode", project.getItemCode());
        context.put("itemNodeCodes", project.getItemNodeCodes());
        context.put("creatitemNodeCode", project.getItemNodeCodes().get(0));
        context.put("menuCodes", project.getMenuCodes());
        if (table != null) {
            context.put("bo", table.getBoName());
            context.put("boLF", Util.lowerFirst(table.getBoName()));
            context.put("ids", table.getIds());
            List<Column> columns = new ArrayList<Column>(table.getIds());
            columns.addAll(table.getColumns());
            context.put("allColumns", columns);
            context.put("columns", table.getColumns());
            List<Column> query = new ArrayList<Column>();
            for (Column column : table.getColumns()) {
                if (column.isQuery()) {
                    query.add(column);
                }
            }
            context.put("query", query);
            List<Column> listShow = new ArrayList<Column>();
            for (Column column : table.getColumns()) {
                if (column.isListShow()) {
                    listShow.add(column);
                }
            }
            context.put("listShow", listShow);
        }
        context.put("S", "$");
        context.put("tmpDir", Config.TMP_DIR);
        return context;
    }

    private static String format(String content, String project, String pkgDir, String bo) throws Exception {
        Map<String, String> map = new HashMap<String, String>();
        map.put("project", project);
        map.put("pkgDir", pkgDir);
        if (bo != null) {
            map.put("bo", Util.lowerFirst(bo));
            map.put("Bo", Util.upperFirst(bo));
        }
        if (content == null || content.isEmpty()) {
            return content;
        }
        String key, value;
        for (Map.Entry<String, String> entry : map.entrySet()) {
            key = entry.getKey();
            value = entry.getValue().replaceAll("\\$", "#DL");
            content = content.replaceAll("\\$\\{" + key + "\\}", value);
        }
        return content.replaceAll("#DL", "\\$");
    }

    private static void gene(List<Table> tables, Table table, Config.GeneItem geneFile) throws Exception {
        Config.Project project = Config.instance().getProject();
        String pkgDir = null;
        if (Util.isNotBlank(project.getPkg())) {
            pkgDir = project.getPkg().replaceAll("\\.", "/");
        }
        String path = format(geneFile.getOut(), project.getName(), pkgDir, table.getBoName());
        String file = project.getDir() + File.separator + path;
        VelocityContext context = getContext(project, geneFile, tables, table, path);

        File f = createPath(file);
        gene(geneFile.getTemplate(), context, f, geneFile.getEncoding());
        log("生成" + geneFile.getName() + "文件:" + f.getName());
    }

    private static void gene(List<Table> tables, Config.GeneItem geneFile) throws Exception {
        Config.Project project = Config.instance().getProject();
        String pkgDir = null;
        if (Util.isNotBlank(project.getPkg())) {
            pkgDir = project.getPkg().replaceAll("\\.", "/");
        }
        String path = format(geneFile.getOut(), project.getName(), pkgDir, null);
        String file = project.getDir() + File.separator + path;
        VelocityContext context = getContext(project, geneFile, tables, null, path);

        File f = createPath(file);
        gene(geneFile.getTemplate(), context, f, geneFile.getEncoding());
        log("生成" + geneFile.getName() + "文件:" + f.getName());
    }

    public static void main(String[] args) throws Exception {
        Config.Project project = Config.instance().getProject();
        log("生成路径:" + project.getDir());
        List<Table> tables = DbBuild.listTables();
        for (Table table : tables) {
            for (Config.GeneItem geneItem : project.getGeneItems()) {
                if (!geneItem.isSingle() && geneItem.isGene()) {
                    gene(tables, table, geneItem);
                }
            }
        }
        for (Config.GeneItem geneItem : project.getGeneItems()) {
            if (geneItem.isSingle() && geneItem.isGene()) {
                gene(tables, geneItem);
            }
        }
        log("生成完成!");
    }
}
