/**
${head}
**/
package ${pkg}.service.impl;

import jade.workflow.utils.ObjectUtil;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import ${Config.project.pkg}.bo.${bo};
import ${Config.project.pkg}.dto.${bo}DTO;
import com.jade.component.taglib.TableTagBean;
import com.jade.infogroup.service.FamilyInfoService;
import com.jade.platform.core.dao.DaoUtil;
import com.jade.platform.core.util.BeanHelper;
import com.jade.platform.core.exception.ServiceException;
import com.jade.platform.core.util.StringMap;
import com.jade.platform.core.web.UserContext;

public class ${bo}ServiceImpl implements ${bo}Service{
	public void create(${bo}DTO ${boLF}Dto) throws ServiceException {
		${bo} ${boLF} = new ${bo}();
		BeanHelper.copyProperties(${boLF}Dto, ${boLF});
#foreach($column in $allColumns)
#if($column.geneType == 1)
#if($column.typeClass == "java.util.Date")
        ${boLF}.set${Util.upperFirst(${column.property})}(new Date());
#elseif($column.typeClass == "java.lang.String")
        ${boLF}.set${Util.upperFirst(${column.property})}(UserContext.getLoginUserID());
#else
        //TODO ${boLF}.set${Util.upperFirst(${column.property})}();
#end
#end
#end
        ${boLF}.save();
	}

#if($ids.size() == 1)
	public ${bo}DTO get(${ids.get(0).typeClass} ${boLF}Id) throws ServiceException {
#else
	public ${bo}DTO get(${bo} ${boLF}Id) throws ServiceException {
#end
        return BeanHelper.copyProperties(DaoUtil.get(${bo}.class, ${boLF}Id),${bo}DTO.class);
	}
    
	public void update(${bo}DTO ${boLF}Dto) throws ServiceException {
#*
#if($ids.size() == 1)
        ${bo} orig = get(${boLF}.get${Util.upperFirst(${ids.get(0).property})}());
#else
        ${bo} orig = get(${boLF});
#end
        BeanUtils.copyProperties(${boLF}, orig, new String[]{#foreach($column in $allColumns)#if($column.geneType != 0)#if($velocityCount>1), #end"${column.property}"#end#end});
#foreach($column in $allColumns)
#if($column.geneType == 2)
#if($column.typeClass == "java.util.Date")
        orig.set${Util.upperFirst(${column.property})}(new Date());
#elseif($column.typeClass == "java.lang.String")
        orig.set${Util.upperFirst(${column.property})}(UserContext.getLoginUserID());
#else
        //TODO ${boLF}.set${Util.upperFirst(${column.property})}();
#end
#end
#end
        orig.update();
*#
		${bo} ${boLF} = new ${bo}();
		BeanHelper.copyProperties(${boLF}Dto, ${boLF});
		${boLF}.update();
	}
    
#if($ids.size() == 1)
	public void delete(${ids.get(0).typeClass} ${boLF}Id) throws ServiceException {
#else
	public void delete(${bo} ${boLF}Id) throws ServiceException {
#end
      DaoUtil.get(${bo}.class, ${boLF}Id).delete();
	}
    
	public List<${bo}DTO> find(TableTagBean ttb) throws ServiceException {
        StringBuilder hql = new StringBuilder();
        HashMap<String, Object> hqlParams = new HashMap<String, Object>();
        buildHQL(ttb.getCondition(), hql, hqlParams);
        String order = ttb.getOrderBy();
        if (order != null) {
            if (ttb.getAsc()) {
                hql.append(" order by " + order + " asc");
            } else {
                hql.append(" order by " + order + " desc");
            }
        }
        List<${bo}DTO> list = DaoUtil.listByCondition(hql.toString(), hqlParams, ttb.getPage() * ttb.getPageSize(), ttb.getPageSize());
        ttb.setList(list);
        ttb.setTotal(DaoUtil.countByCondition("select count(*) "+hql, hqlParams));
        return list;
	}

    public void buildHQL(StringMap params, StringBuilder hql, HashMap<String, Object> hqlParams) throws ServiceException {
        hql.append("from ${bo} where 1=1");
#foreach($column in $query)
#parse("${tmpDir}src/cond_tmp/${column.inputType}.vm")
#end
   }
}